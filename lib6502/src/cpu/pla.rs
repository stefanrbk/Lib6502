use bitfield::bitfield;

pub const NOTSTACKCHECK: u32 = 0b10010111000010000000000;

pub const PD1XX000X0: u32 = 0b00011101100000000000000;
pub const PD0XX0XX0X: u32 = 0b10010010000000000000000;
pub const PDXXXX10X0: u32 = 0b00000101000010000000000;
pub const PDXXX010X1: u32 = 0b00010100000010010000000;

bitfield! {
    pub struct Pla(u128);
    pub get_, set_: 0;
}

pub fn check_opcode(opcode: u8, tstate: u8, check: u32) -> bool {
    let op = !opcode as u32;
    let op = op << 8;
    let op = op | (opcode as u32);
    let op = op << 4;
    let op = op
        | match tstate {
            2 => 1,
            3 => 2,
            4 => 4,
            5 => 8,
            _ => 0,
        };
    let op = op << 2;
    let op = op
        | match tstate {
            0 => 2,
            1 => 1,
            _ => 0,
        };
    let op = op << 1;
    if check & 0b1 != 0 {
        let not_stack = (op | NOTSTACKCHECK) != NOTSTACKCHECK;
        let op = op
            | match not_stack {
                true => 1,
                false => 0,
            };
        return (op | check) == check;
    }
    return (op | check) == check;
}
pub const PLA: [u32; 129] = [
    //0 STY (100xx100)
    0b01100011100001000000000,
    //1 ind, Y (xxx100x1) T3
    0b00001100000100010010000,
    //2 abs, Y (xxx110x1) T2
    0b00000100000110010001000,
    //3 INY/DEY (1x001000) Tx-
    0b00110111100010000000010,
    //4 TYA (10011000) Tx-
    0b01100111100110000000010,
    //5 CPY/INY (1100xx00) Tx-
    0b00110011110000000000010,
    //6 X/Y indexed (xxx1x1xx) T2
    0b00000000000101000001000,
    //7 X&Y reg ops (10xxxx1x)
    0b01000000100000100000000,
    //8 X, ind (xxx000x1) T2
    0b00011100000000010001000,
    //9 TXA (1000101x) Tx-
    0b01110100100010100000010,
    //10 DEX (1100101x) Tx-
    0b00110100110010100000010,
    //11 CPX/INX (1110xx00) Tx-
    0b00010011111000000000010,
    //12 from X (100xxx1x)
    0b01100000100000100000000,
    //13 TXS (10011x1x) Tx-
    0b01100000100110100000010,
    //14 LDX/TAX/TSX (101xxx1x) Tx-
    0b01000000101000100000010,
    //15 DEX (1100101x) Tx+
    0b00110100110010100000100,
    //16 INX (11101000) Tx+
    0b00010111111010000000100,
    //17 TSX (1011101x) Tx-
    0b01000100101110100000010,
    //18 INY/DEY (1x001000) Tx+
    0b00110111100010000000100,
    //19 LDY mem (101xx100) Tx-
    0b01000011101001000000010,
    //20 TAY/LDY not X indexed (1010xx00) Tx-
    0b01010011101000000000010,
    //21 JSR (00100000) Tx-
    0b11011111001000000000010,
    //22 BRK (00000000) T5
    0b11111111000000001000000,
    //23 PHP/PHA (0x001000) Tx-
    0b10110111000010000000010,
    //24 RTS (01100000) T4
    0b10011111011000000100000,
    //25 PLP/PLA (0x101000) T3
    0b10010111001010000010000,
    //26 RTI (01000000) T5
    0b10111111010000001000000,
    //27 ROR (011xxx1x)
    0b10000000011000100000000,
    //28 T2 (xxxxxxxx) T2
    0b00000000000000000001000,
    //29 EOR (010xxxx1) Tx-
    0b10100000010000010000010,
    //30 JMP (01x01100)
    0b10010011010011000000000,
    //31 abs (xxx011xx) T2
    0b00010000000011000001000,
    //32 ORA (000xxxx1) Tx-
    0b11100000000000010000010,
    //33 ADL/ADD (xxxx0xxx) T2
    0b00001000000000000001000,
    //34 T0 (xxxxxxxx) Tx-
    0b00000000000000000000010,
    //35 Stack (0xx0x000) T2
    0b10010111000000000001000,
    //36 Stack/BIT/JMP (0xx0xx00) T3
    0b10010011000000000010000,
    //37 BRK/JSR (00x00000) T4
    0b11011111000000000100000,
    //38 RTI (01000000) T4
    0b10111111010000000100000,
    //39 X, ind (xxx000x1) T3
    0b00011100000000010010000,
    //40 ind, Y (xxx100x1) T4
    0b00001100000100010100000,
    //41 ind, Y (xxx100x1) T2
    0b00001100000100010001000,
    //42 abs idx (xxx11xxx) T3
    0b00000000000110000010000,
    //43 PLP/PLA (0x101000)
    0b10010111001010000000000,
    //44 INC/NOP (111xxx1x)
    0b00000000111000100000000,
    //45 X, ind (xxx000x1) T4
    0b00011100000000010100000,
    //46 ind, Y (xxx100x1) T3
    0b00001100000100010010000,
    //47 RTI/RTS (01x00000)
    0b10011111010000000000000,
    //48 JSR (00100000) T2
    0b11011111001000000001000,
    //49 CPX/CPY/INX/INY (11x0xx00) Tx-
    0b00010011110000000000010,
    //50 CMP (110xxxx1) Tx-
    0b00100000110000010000010,
    //51 SBC (111xxxx1) Tx-
    0b00000000111000010000010,
    //52 ADC/SBC (x11xxxx1) Tx-
    0b00000000011000010000010,
    //53 ROL (001xxx1x)
    0b11000000001000100000000,
    //54 JMP (01x01100) T3
    0b10010011010011000010000,
    //55 ROL/ASL (00xxxx1x)
    0b11000000000000100000000,
    //56 JSR (00100000) T5
    0b11011111001000001000000,
    //57 Stack access (0xx0x000) T2
    0b10010111000000000001000,
    //58 TYA (10011000) Tx-
    0b01100111100110000000010,
    //59 ORA/AND/EOR/ADC (0xxxxxx1) Tx+
    0b10000000000000010000100,
    //60 ADC/SBC (x11xxxx1) Tx+
    0b00000000011000010000100,
    //61 Shift A (0xx0101x) Tx+
    0b10010100000010100000100,
    //62 TXA (1000101x) Tx-
    0b01110100100010100000010,
    //63 PLA (01101000) Tx-
    0b10010111011010000000010,
    //64 LDA (101xxxx1) Tx-
    0b01000000101000010000010,
    //65 A reg (xxxxxxx1) Tx-
    0b00000000000000010000010,
    //66 TAY (10101000) Tx-
    0b01010111101010000000010,
    //67 Shift A (0xx0101x) Tx-
    0b10010100000010100000010,
    //68 TAX (1010101x) Tx-
    0b01010100101010100000010,
    //69 BIT (0010x100) Tx-
    0b11010011001001000000010,
    //70 AND (001xxxx1) Tx-
    0b11000000001000010000010,
    //71 abs idx (xxx11xxx) T4
    0b00000000000110000100000,
    //72 ind, Y (xxx100x1) T5
    0b00001100000100011000000,
    //73 Branch done (xxx10000) Tx-
    0b00001111000100000000010,
    //74 PHA (01001000) T2
    0b10110111010010000001000,
    //75 Shift right A (01x0101x) Tx-
    0b10010100010010100000010,
    //76 Shift right (01xxxx1x)
    0b10000000010000100000000,
    //77 BRK (00000000) T2
    0b11111111000000000001000,
    //78 JSR (00100000) T3
    0b11011111001000000010000,
    //79 STA/CMP (100xxxx1)
    0b01100000100000010000000,
    //80 Branch (xxx10000) T2
    0b00001111000100000001000,
    //81 zp/zp, X/Y (xxxx01xx) T2
    0b00001000000001000001000,
    //82 X/Y indirect (xxxx00x1) T2
    0b00001100000000010001000,
    //83 abs access (xxxx1xxx) T2
    0b00000000000010000001001,
    //84 RTS (01100000) T5
    0b10011111011000001000000,
    //85 T4 (xxxxxxxx) T4
    0b00000000000000000100000,
    //86 T3 (xxxxxxxx) T3
    0b00000000000000000010000,
    //87 BRK/RTI (0x000000) Tx-
    0b10111111000000000000010,
    //88 JMP (01x01100) Tx-
    0b10010011010011000000010,
    //89 X, ind (xxx000x1) T5
    0b00011100000000011000000,
    //90 abs/idx/ind (xxxx1xxx) T3
    0b00000000000010000010000,
    //91 ind, Y (xxx100x1) T4
    0b00001100000100010100000,
    //92 abs idx (xxx11xxx) T3
    0b00000000000110000010000,
    //93 branch (xxx10000) T3
    0b00001111000100000010000,
    //94 BRK/RTI (0x000000)
    0b10111111000000000000000,
    //95 JSR (00100000)
    0b11011111001000000000000,
    //96 JMP (01x01100)
    0b10010011010011000000000,
    //97 store (100xxxxx)
    0b01100000100000000000000,
    //98 BRK (00000000) T4
    0b11111111000000000100000,
    //99 PHP (00001000) T2
    0b11110111000010000001000,
    //100 PHP/PHA (0x001000) T2
    0b10110111000010000001000,
    //101 JMP (01x01100) T4
    0b10010011010011000100000,
    //102 RTI/RTS (01x00000) T5
    0b10011111010000001000000,
    //103 JSR (00100000) T5
    0b11011111001000001000000,
    //104 JMP abs (01001100) T2
    0b10110011010011000001000,
    //105 PLP/PLA (0x101000) T3
    0b10010111001010000010000,
    //106 LSR/ROR/DEC/INC (x1xxxx1x)
    0b00000000010000100000000,
    //107 ROL/ASL (00xxxx1x)
    0b11000000000000100000000,
    //108 CLI/SEI (01x11000) Tx-
    0b10000111010110000000010,
    //109 BIT (0010x100) Tx+
    0b11010011001001000000100,
    //110 CLC/SEC (00x11000) Tx-
    0b11000111000110000000010,
    //111 zp, X/Y (xxx101xx) T3
    0b00001000000101000010000,
    //112 ADC/SBC (x11xxxx1) Tx+
    0b00000000011000010000100,
    //113 BIT (0010x100) Tx-
    0b11010011001001000000010,
    //114 PLP (00101000) Tx-
    0b11010111001010000000010,
    //115 RTI (01000000) T4
    0b10111111010000000100000,
    //116 CMP (110xxxx1) Tx+
    0b00100000110000010000100,
    //117 CPX/CPY abs (11x01100) Tx+
    0b00010011110011000000100,
    //118 ROL/ASL A (00x0101x) Tx+
    0b11010100000010100000100,
    //119 CPX/CPY imm/zp (11x00x00) Tx+
    0b00011011110000000000100,
    //120 CLD/SED (11x11000) Tx-
    0b00000111110110000000010,
    //121 bit 6 (x1xxxxxx)
    0b00000000010000000000000,
    //122 abs (xxx011xx) T3
    0b00010000000011000010000,
    //123 zp (xxx001xx) T2
    0b00011000000001000001000,
    //124 X, ind/ind, Y (xxxx00x1) T5
    0b00001100000000011000000,
    //125 abs idx (xxx11xxx) T4
    0b00000000000110000100000,
    //126 bit 7 (1xxxxxxx)
    0b00000000100000000000000,
    //127 CLV (10111000)
    0b01000111101110000000000,
    //128 impl (xxxxxxx0)
    0b00000001000000000000001,
];
